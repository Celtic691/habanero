//---------------------------------------------------------------------------------
// Copyright (C) 2008 Chillisoft Solutions
// 
// This file is part of the Habanero framework.
// 
//     Habanero is a free framework: you can redistribute it and/or modify
//     it under the terms of the GNU Lesser General Public License as published by
//     the Free Software Foundation, either version 3 of the License, or
//     (at your option) any later version.
// 
//     The Habanero framework is distributed in the hope that it will be useful,
//     but WITHOUT ANY WARRANTY; without even the implied warranty of
//     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//     GNU Lesser General Public License for more details.
// 
//     You should have received a copy of the GNU Lesser General Public License
//     along with the Habanero framework.  If not, see <http://www.gnu.org/licenses/>.
//---------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using Habanero.Base;
using Habanero.BO;

namespace Habanero.UI.Base
{
    /// <summary>
    /// The delegate used for custom loading of the grid
    /// </summary>
    /// <param name="grid">The grid to be loaded</param>
    /// <param name="col">The collection to load into the grid</param>
    public delegate void GridLoaderDelegate(IGridBase grid, IBusinessObjectCollection col);

    /// <summary>
    /// Handles the event of a user double-clicking on a row in the grid
    /// </summary>
    /// <param name="sender">The object that notified of the event</param>
    /// <param name="e">Attached arguments regarding the event</param>
    public delegate void RowDoubleClickedHandler(Object sender, BOEventArgs e);

    /// <summary>
    /// Provides a DataGridView that is adapted to show business objects
    /// </summary>
    public interface IGridBase : IControlHabanero
    {
        /// <summary>
        /// Sets the business object collection displayed in the grid.  This
        /// collection must be pre-loaded using the collection's Load() command.
        /// The default UI definition will be used, that is a 'ui' element 
        /// without a 'name' attribute.
        /// </summary>
        /// <param name="col">The collection of business objects to display.  This
        /// collection must be pre-loaded.</param>
        void SetBusinessObjectCollection(IBusinessObjectCollection col);

        /// <summary>
        /// Gets the collection of rows in the grid
        /// </summary>
        [Browsable(false), DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        IDataGridViewRowCollection Rows { get; }

        /// <summary>
        /// Gets a collection of columns set up for the grid
        /// </summary>
        [Browsable(false), DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        IDataGridViewColumnCollection Columns { get; }

        /// <summary>
        /// Gets and sets the flag indicating whether the user can add new items directly into the grid
        /// </summary>
        bool AllowUserToAddRows { get; set; }

        /// <summary>
        /// Gets and sets the grids DataSource
        /// </summary>
        object DataSource { get; set; }

        /// <summary>
        /// Gets and sets the currently selected business object in the grid
        /// </summary>
        [Browsable(false), DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        IBusinessObject SelectedBusinessObject { get; set; }

        /// <summary>
        /// Gets a List of currently selected business objects
        /// </summary>
        IList<BusinessObject> SelectedBusinessObjects { get; }

        /// <summary>
        /// Gets the collection of currently selected rows
        /// </summary>
        IDataGridViewSelectedRowCollection SelectedRows { get; }

        /// <summary>
        /// Gets the collection of currently selected cells
        /// </summary>
        IDataGridViewSelectedCellCollection SelectedCells { get; }

        /// <summary>
        /// Gets and sets a value indicating whether the columns on the grid should be
        /// auto-generated by the grid, based on the properties of the business object
        /// or the fields in the generated dataview
        /// </summary>
        bool AutoGenerateColumns { get; set; }

        /// <summary>
        /// Gets the currently selected row
        /// </summary>
        [Browsable(false), DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        IDataGridViewRow CurrentRow { get; }

        /// <summary>
        /// Occurs when a business object is selected
        /// </summary>
        event EventHandler<BOEventArgs> BusinessObjectSelected;

        /// <summary>
        /// Occurs when the current selection in the grid is changed
        /// </summary>
        event EventHandler SelectionChanged;

        /// <summary>
        /// Occurs when the collection in the grid is changed
        /// </summary>
        event EventHandler CollectionChanged;

        /// <summary>
        /// Clears the business object collection and the rows in the data table
        /// </summary>
        void Clear();

        /// <summary>
        /// Returns the business object collection being displayed in the grid
        /// </summary>
        /// <returns>Returns a business collection</returns>
        IBusinessObjectCollection GetBusinessObjectCollection();

        /// <summary>
        /// Returns the business object at the specified row number
        /// </summary>
        /// <param name="row">The row number in question</param>
        /// <returns>Returns the busines object at that row, or null
        /// if none is found</returns>
        IBusinessObject GetBusinessObjectAtRow(int row);

        /// <summary>
        /// Sets the sort column and indicates whether
        /// it should be sorted in ascending or descending order
        /// </summary>
        /// <param name="columnName">The column number to sort on</param>
        /// object property</param>
        /// <param name="ascending">True for ascending order, false for descending order</param>
        void Sort(string columnName, bool ascending);

        /// <summary>
        /// Applies a filter clause to the data table and updates the filter.
        /// The filter allows you to determine which objects to display using
        /// some criteria.  This is typically generated by an <see cref="IFilterControl"/>.
        /// </summary>
        /// <param name="filterClause">The filter clause</param>
        void ApplyFilter(IFilterClause filterClause);

        /// <summary>
        /// Gets or sets the number of items per page used when the grid implements pagination
        /// </summary>
        int ItemsPerPage { get; set; }

        /// <summary>
        /// Gets or sets the current page of the grid when the grid implements pagination
        /// </summary>
        int CurrentPage { get; set; }

        /// <summary>
        /// Gets or sets the value indicating whether the grid is read-only
        /// </summary>
        bool ReadOnly { get; set; }

        /// <summary>
        /// Gets or sets the value indicating whether the user can delete rows
        /// </summary>
        bool AllowUserToDeleteRows { get; set; }

        /// <summary>
        /// Gets and sets the delegated grid loader for the grid.
        /// <br/>
        /// This allows the user to implememt a custom
        /// loading strategy. This can be used to load a collection of business objects into a grid with images or buttons
        /// that implement custom code. (Grids loaded with a custom delegate generally cannot be set up to filter 
        /// (grid filters a dataview based on filter criteria),
        /// but can be set up to search (a business object collection loaded with criteria).
        /// For a grid to be filterable the grid must load with a dataview.
        /// <br/>
        /// If no grid loader is specified then the default grid loader is employed. This consists of parsing the collection into 
        /// a dataview and setting this as the datasource.
        /// </summary>
        [Browsable(false), DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        GridLoaderDelegate GridLoader { get; set; }

        /// <summary>
        /// Gets the grid's DataSet provider, which loads the collection's
        /// data into a DataSet suitable for the grid
        /// </summary>
        IDataSetProvider DataSetProvider { get; }

        /// <summary>
        /// Fires an event indicating that the selected business object
        /// is being edited
        /// </summary>
        /// <param name="bo">The business object being edited</param>
        /// TODO: this is badly named (why do we indicate the BO, but say "Selected") - this should be a
        /// verb, as in FireBusinessObjectEdited
        void SelectedBusinessObjectEdited(BusinessObject bo);

        /// <summary>
        /// Occurs when a business object is being edited
        /// </summary>
        event EventHandler<BOEventArgs> BusinessObjectEdited;

        /// <summary>
        /// Reloads the grid based on the grid returned by GetBusinessObjectCollection
        /// </summary>
        void RefreshGrid();

        /// <summary>
        /// When pagination is used, changes the current page to the one containing
        /// the given row number
        /// </summary>
        /// <param name="rowNum">The row that you wish to show the page of.  For example, if your grid has
        /// 30 rows and is set to 20 rows per page, calling ChangeToPageOfRow with an argument
        /// of 25 will set the page to page 2 since row 25 is on page 2.</param>
        void ChangeToPageOfRow(int rowNum);

        /// <summary>
        /// Creates a dataset provider that is applicable to this grid. For example, a readonly grid would
        /// return a <see cref="ReadOnlyDataSetProvider"/>, while an editable grid would return an editable one.
        /// </summary>
        /// <param name="col">The collection to create the datasetprovider for</param>
        /// <returns>Returns the data set provider</returns>
        IDataSetProvider CreateDataSetProvider(IBusinessObjectCollection col);

        /// <summary>
        /// Sets the current cell into editing mode, if the grid is editable
        /// </summary>
        /// <param name="selectAll">Whether to select all the text in the cell</param>
        /// <returns>Returns true if the cell was successfully set into editing mode</returns>
        bool BeginEdit(bool selectAll);

        /// <summary>
        /// Gets or sets the currently selected cell
        /// </summary>
        IDataGridViewCell CurrentCell { set; get; }

        /// <summary>
        /// Gets or sets a value indicating whether the user is allowed to
        /// select more than one cell, row, or column at a time
        /// </summary>
        bool MultiSelect { get; set; }

        /// <summary>
        /// Occurs when a row is double-clicked by the user
        /// </summary>
        event RowDoubleClickedHandler RowDoubleClicked;
    }
}