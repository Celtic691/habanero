//---------------------------------------------------------------------------------
// Copyright (C) 2008 Chillisoft Solutions
// 
// This file is part of the Habanero framework.
// 
//     Habanero is a free framework: you can redistribute it and/or modify
//     it under the terms of the GNU Lesser General Public License as published by
//     the Free Software Foundation, either version 3 of the License, or
//     (at your option) any later version.
// 
//     The Habanero framework is distributed in the hope that it will be useful,
//     but WITHOUT ANY WARRANTY; without even the implied warranty of
//     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//     GNU Lesser General Public License for more details.
// 
//     You should have received a copy of the GNU Lesser General Public License
//     along with the Habanero framework.  If not, see <http://www.gnu.org/licenses/>.
//---------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using Habanero.Base;
using Habanero.BO;

namespace Habanero.UI.Base
{
    /// <summary>
    /// The delegate used for custom loading of the grid
    /// </summary>
    /// <param name="grid">the grid to be loaded</param>
    /// <param name="col">the collection to load into the grid</param>
    public delegate void GridLoaderDelegate(IGridBase grid, IBusinessObjectCollection col);

    public interface IGridBase: IControlChilli
    {
        /// <summary>
        /// Sets the business object collection displayed in the grid.  This
        /// collection must be pre-loaded using the collection's Load() command.
        /// The default ui definition will be used, that is a 'ui' element 
        /// without a 'name' attribute.
        /// </summary>
        /// <param name="col">The collection of business objects to display.  This
        /// collection must be pre-loaded.</param>
        void SetBusinessObjectCollection(IBusinessObjectCollection col);

        /// <summary>
        /// returns a collection of rows currently shown in the grid.
        /// </summary>
        [Browsable(false), DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        IDataGridViewRowCollection Rows { get; }

        /// <summary>
        /// returns a collection of columns set up for the grid
        /// </summary>
        [Browsable(false), DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        IDataGridViewColumnCollection Columns { get; }

        /// <summary>
        /// Gets and sets the flag indicating whether the user can add new items directly into the grid or not.
        /// </summary>
        bool AllowUserToAddRows { get; set; }

        /// <summary>
        /// Gets and sets the grids datasource.
        /// </summary>
        object DataSource { get; set; }

        /// <summary>
        /// Gets and sets the grids currently selected business object.
        /// </summary>
        [Browsable(false), DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        IBusinessObject SelectedBusinessObject { get; set; }

        /// <summary>
        /// Returns a List of selected business objects.
        /// </summary>
        IList<BusinessObject> SelectedBusinessObjects { get; }

        IDataGridViewSelectedRowCollection SelectedRows { get; }

        /// <summary>
        /// Must the columns on the grid be autogenerated by the grid based on the properties of the business object
        /// or the fields in the generatred dataview
        /// </summary>
        bool AutoGenerateColumns { get; set; }

        /// <summary>
        /// returns the currently selected row
        /// </summary>
        [Browsable(false), DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        IDataGridViewRow CurrentRow { get; }

        event EventHandler<BOEventArgs> BusinessObjectSelected;
        event EventHandler SelectionChanged;
        event EventHandler CollectionChanged;

        /// <summary>
        /// Clears the business object collection and the rows in the data table
        /// </summary>
        void Clear();

        /// <summary>
        /// Returns the business object collection being displayed in the grid
        /// </summary>
        /// <returns>Returns a business collection</returns>
        IBusinessObjectCollection GetBusinessObjectCollection();

        /// <summary>
        /// Returns the business object at the row specified
        /// </summary>
        /// <param name="row">The row number in question</param>
        /// <returns>Returns the busines object at that row, or null
        /// if none is found</returns>
        IBusinessObject GetBusinessObjectAtRow(int row);

        /// <summary>
        /// Sets the sort column and indicates whether
        /// it should be sorted in ascending or descending order
        /// </summary>
        /// <param name="columnName">The column number to set</param>
        /// object property</param>
        /// <param name="ascending">Whether sorting should be done in ascending
        /// order ("false" sets it to descending order)</param>
        void Sort(string columnName, bool ascending);

        /// <summary>
        /// Applies a filter clause to the data table and updates the filter.
        /// The filter allows you to determine which objects to display using
        /// some criteria.
        /// </summary>
        /// <param name="filterClause">The filter clause</param>
        void ApplyFilter(IFilterClause filterClause);
        /// <summary>
        /// The number of items per page used when the grid implements pagination.
        /// </summary>
        int ItemsPerPage { get; set; }
        /// <summary>
        /// The current page of the grid where the grid implements pagination.
        /// </summary>
        int CurrentPage { get; set; }

        /// <summary>
        /// Is the grid readonly.
        /// </summary>
        bool ReadOnly { get; set; }

        /// <summary>
        /// Can the user delete rows from the grid
        /// </summary>
        bool AllowUserToDeleteRows { get; set; }

        /// <summary>
        /// Gets and sets the delegated grid loader for the grid. This allows the user to implememt a custom
        /// loading strategy. This can be used to load a collection of business objects into a grid with images, buttons
        /// that implement custom code. (Grids loaded with a custom delegate generally cannot be set up to filter 
        /// (grid filters a dataview based on filter criteria)
        /// but can be set up to search - business object collection loaded with criteria).
        /// For a grid to be filterable the grid must load with a dataview.
        /// If no Grid loader is specified then the default grid loader is employed this consists of parsing the collection into 
        /// a dataview and setting this as the datasource.
        /// </summary>
        [Browsable(false), DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        GridLoaderDelegate GridLoader { get; set; }

        IDataSetProvider DataSetProvider { get; }


        void SelectedBusinessObjectEdited(BusinessObject bo);

        /// <summary>
        /// Handles the event of the currently selected business object being edited.
        /// This is used only for internal testing
        /// </summary>
        event EventHandler<BOEventArgs> BusinessObjectEdited;

        /// <summary>
        /// reloads the grid based on the grid returned by GetBusinessObjectCollection
        /// </summary>
        void RefreshGrid();

        /// <summary>
        /// Pages the grid to the row number indicated.  This will not do anything for a non
        /// paginating grid (like the Windows.Forms DataGridView).
        /// </summary>
        /// <param name="rowNum">The row that you wish to show the page of. Eg, if your grid has
        /// 30 rows in it and is set to 20 rows per page, calling ChangeToPageOfRow with an argument
        /// of 25 will set the page to page 2 since row 25 is on page 2.</param>
        void ChangeToPageOfRow(int rowNum);

        /// <summary>
        /// Creates a dataset provider that is applicable to this grid. For example, a readonly grid would
        /// return a read only datasetprovider, while an editable grid would return an editable one.
        /// </summary>
        /// <param name="col">The collection to create the datasetprovider for</param>
        /// <returns></returns>
        IDataSetProvider CreateDataSetProvider(IBusinessObjectCollection col);
    }
}